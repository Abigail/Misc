#!/opt/perl/bin/perl

use 5.032;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';
use experimental 'lexical_subs';

use Getopt::Long;

my %ext2language = (
    bas     =>   "basic",
    bf93    =>   "befunge",
    mps     =>   "mumps",
);

GetOptions 'lang|language=s' => \my $language,
;

my $program = shift // die "Usage $0: <program>";

if (!$language) {
    #
    # Try to guess language from extention
    #
    my ($ext) = $program =~ /\.([a-z0-9]+)$/;
    if ($ext) {
        $language = $ext2language {$ext};
    }
}
if (!$language) {
    #
    # Guess from executable name
    #
    $language = $0 =~ s!.*/!!r;
}
$language =~ s/[^0-9A-Za-z]+//g;
$language = lc $language;

if ($language eq 'befunge') {
    use Befunge::Interpreter;
    no warnings 'redefine';
    no strict   'refs';
    my @buffer;
    my sub put_char ($char) {
        push @buffer => $char;
    }
    my sub get_char {
        return pop @buffer if @buffer;
        eof (STDIN) ? -1 : ord getc STDIN;
    }
    *{"Befunge::Interpreter::input_int"} = sub {
        # Skip any whitespace
        my $c;
        my $int = 0;
        while (1) {
            $c = get_char;
            if ($c < 0) {  # EOF
                Befunge::Interpreter::spush ($c);
                return;
            }
            last if chr ($c) =~ /\S/;
        }
        while ($c >= 0 && chr ($c) =~ /[0-9]/) {
            $int = 10 * $int + chr $c;
            $c = get_char;
        }
        # Now $c is a not number.
        # If we are at EOF, $c < 0. Return it if we haven't
        # read a number yet, else, push it back.
        #
        if ($c < 0) {   # EOF
            if ($int) {
                put_char ($c);
                Befunge::Interpreter::spush ($int);
                return;
            }
            Befunge::Interpreter::spush ($c);
            return;
        }
        Befunge::Interpreter::spush ($int);

        # Skip any horizontal whitespace.
        while ($c >= 0 && chr ($c) =~ /^\h$/) {
            $c = get_char;
        }

        # $c is not first non-whitespace. so push it back.
        put_char ($c);
    };

    *{"Befunge::Interpreter::input_ASCII"} = sub {
        Befunge::Interpreter::spush (get_char);
    };

    *{"Befunge::Interpreter::torus_put"} = sub {
        my $Y     = Befunge::Interpreter::spop ();
        my $X     = Befunge::Interpreter::spop ();
        my $value = Befunge::Interpreter::spop ();
        $Befunge::Interpreter::torus [$X] [$Y] = chr $value;
    };

    *{"Befunge::Interpreter::torus_get"} = sub {
        my $Y     = Befunge::Interpreter::spop ();
        my $X     = Befunge::Interpreter::spop ();
        Befunge::Interpreter::spush (ord $Befunge::Interpreter::torus [$X] [$Y])
    };

    my $interpreter = Befunge::Interpreter:: -> new;
       $interpreter -> get_befunge ($program);
    #
    # Befunge specification says ` is greater than, but
    # Befunge::Interpreter uses '. So, we fix the torus.
    # 
    # Luckely, Befunge::Interpreter uses global variables....
    #
    foreach my $row (@Befunge::Interpreter::torus) {
        defined () && s/`/'/ for @$row;
    }
    if (0) {
        foreach my $y (0 .. 24) {
            foreach my $x (0 .. 79) {
                local $" = "";
                print $Befunge::Interpreter::torus [$x] [$y] // " ";
            }
            print "\n";
        }
        foreach my $y (0 .. 24) {
            foreach my $x (0 .. 79) {
                if (defined $Befunge::Interpreter::torus [$x] [$y] &&
                    $Befunge::Interpreter::torus [$x] [$y] eq "v") {
                    say "[$x] [$y]"
                }
            }
        }
    }
    $interpreter -> process_befunge;
}
elsif ($language eq 'basic') {
    use Language::Basic;
    my $interpreter = Language::Basic::Program:: -> new;
       $interpreter -> input ($program);
       $interpreter -> parse;
       $interpreter -> implement;
}
elsif ($language eq 'mumps') {
    use lib '.';
    use Language::Mumps;
    my $text = `cat $program`;
    my $code = Language::Mumps::compile ($text);
    say $code;
}
else {
    die "Language $language not implemented";
}


__END__
