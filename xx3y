#!/opt/perl/bin/perl

#
# Find pairs (x >= y >= 1) so that x^2 + 3y is a square,
# and y^2 + 3x is a square.
#
# Usage:
#
#    xx3y  <MAX>
#
# where MAX is the maximum x to consider. Without arguments, MAX == 100,000,000
#
#
# See https://blog.computationalcomplexity.org/2020/09/two-math-problems-of-interest-at-least.html
#
#
# Note:
#
#       (x + 2)^2             ==
#        x^2 + 4x + 4         >
#        x^2 + 3x             >=
#        x^2 + 3y
#
# Hence x^2 + 3y must be (x + 1)^2.
#
# From:
#
#       (x + 1)^2 == x^2 + 3y
#
# it follows that y = 2x + 1.
#
# Therefore, in the program below, we only consider
#
#    x = 1 + 3k, y = 1 + 2k, k >= 0
#

use 5.026;

use strict;
use warnings;
no  warnings 'syntax';

use bigint;   # Makes the program (much) slower, but enables us to 
              # check huge numbers, without having to worry about
              # loss of precision.

my $MAX = (shift // 100_000_000) / 3;

for (my $k = 0; $k < $MAX; $k ++) {
    my $x = 1 + 3 * $k;
    my $y = 1 + 2 * $k;
    # say "[$x]" if $x =~ /^10*$/;
    my $sqrt_xy = sqrt (my $xy = $x ** 2 + 3 * $y);
    my $sqrt_yx = sqrt (my $yx = $y ** 2 + 3 * $x);

    #
    # Under 'use bigint', taking the square root will always
    # result into an integers, so we cannot just check whether
    # the result is an integer to see whether we took the square
    # root of a square number. We'd have to square it again, and
    # see whether we got back the same number.
    #

    say "($x, $y)" if $sqrt_xy ** 2 == $xy && $sqrt_yx ** 2 == $yx;
}

__END__
