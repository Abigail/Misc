#!/opt/perl/bin/perl

use 5.032;

use strict;
use warnings;
no  warnings 'syntax';
use autodie;

use experimental 'signatures';
use experimental 'lexical_subs';

use Getopt::Long;

GetOptions  'perl' => \my $perl;

my $repo = "perlweeklychallenge-club";
my $user = $ENV {USER};
my $dir  = $ENV {HOME} . "/GitHub/Programming_Challenges/$repo";

chdir $dir;
#chomp (my @list = grep {!m{/perl/}} `find challenge-*/$user/*/ch-[12].*`);
chomp (my @list = `find challenge-*/$user/*/ch-[12].*`);

@list = grep {!m{/perl/}} @list unless $perl;

use List::Util qw [sum];

my @guest;
my %languages;

my %map  =  (
    awk       =>  '(GNU) AWK',
    befunge   =>  'Befunge-93',
    m4        =>  'm4',
    node      =>  'Node.js',
    ocaml     =>  'OCaml',
    ook       =>  'Ook!',
    php       =>  'PHP',
    sql       =>  'SQL',
);

#
# Collect statistics
#
foreach my $file (@list) {
    $file =~ m {challenge-(?<week>[0-9]{3})/
                $user/
                (?<language>[^/]+)/
                ch-(?<part>[12])\.
                (?<ext>[a-z0-9]+)}x or die "Cannot parse $file";
    next if $+ {language} eq 'sql' && $+ {ext} eq 'table';
    $guest [$+ {week}] [$+ {part}] {$+ {language}} ++;
    $languages {$+ {language}} ++;
}

#
# Print a grid of all solutions in the guest languages.
#
my @all_languages = sort {$a cmp $b} keys %languages;

my @header_langs  = map {($map {$_} || ucfirst $_) =~ s/^\([^)]+\)\s*//r}
                          @all_languages;
use List::Util 'max';
my $rows = max map {length ($_)} @header_langs;
my @headers = (" " x (18 + 2 * @header_langs)) x $rows;
foreach my $i (keys @header_langs) {
    my @chars = split // => $header_langs [$i];
    foreach my $j (keys @chars) {
        substr $headers [$j], 18 + 2 * $i, 1, $chars [$j];
    }
}
my $header = join "\n" => @headers;

say $header;

for my $week (keys @guest) {
    next unless $guest [$week];
    my $header = sprintf "Week %3d, part ", $week;
    for my $part (1, 2) {
        next unless $guest [$week] [$part];
        printf "%15s", $header;
        $header  = " " x 9;
        $header .= "part ";
        print $part, " ";
        my $count = 0;
        foreach my $language (@all_languages) {
            printf " %s", $guest [$week] [$part] {$language} ? "X" : " ";
            $count ++ if  $guest [$week] [$part] {$language};
        }
        printf "  %2d\n", $count;
    }
}

print "\n";
say $header;

#
# Counts by language
#
print "\n\n";
my @l = sort {$languages {$b} <=> $languages {$a} ||
                          $a  cmp             $b} keys %languages;

printf "%3d  %s\n" => $languages {$_}, $map {$_} || ucfirst $_ for @l;
printf "%3d  Total\n", sum values %languages;

