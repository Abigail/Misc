#!/opt/perl/bin/perl

#
# Test the solutions. Either call it with the directory name you
# want to test in, or call it as "../test.pl" from within the directory.
#

use 5.032;

use strict;
use warnings;
no  warnings 'syntax';

use experimental 'signatures';
use experimental 'lexical_subs';

use Test::More;
use DBI;
use Getopt::Long;
use Config::Any;
use Time::HiRes qw [time];

#
# Read options
#
GetOptions 'slow'              =>  \my $run_slow_tests,
           'lang|language=s'   =>  \my @languages,
           'ch|challenges=i'   =>  \my @challenges,
;

my $PERL_WEEKLY_CHALLENGE = 1;
my $ADVENT_OF_CODE        = 2;
my $GOLF                  = 3;
my $KEY_LANGUAGES         = "languages";
my $KEY_TYPE              = "type";
my $KEY_INPUTS            = "input";
my $KEY_CHALLENGES        = "challenges";
my $INDEX_SOURCE          =  0;
my $INDEX_TESTS           =  1;

################################################################################
#
# First, figure out what kind of challenge we are dealing with.
#
################################################################################

my $pwd = `pwd`;
my $dir;
my $type;
if ($pwd =~ m {/GitHub/}p) {
    $dir = ${^POSTMATCH};
    if ($dir =~ m {Programming_Challenges/perlweeklychallenge-club}) {
        $type = $PERL_WEEKLY_CHALLENGE;
    }
    if ($dir =~ m {AdventOfCode20[0-9]{2}/}) {
        $type = $ADVENT_OF_CODE;
    }
    if ($dir =~ m {Golf/StackExchange/}) {
        $type = $GOLF;
    }
}
die "Cannot figure out what we are testing" unless defined $type;


################################################################################
#
# Go to the appropriate directory, if needed.
#
################################################################################

if ($type == $PERL_WEEKLY_CHALLENGE) {
    my $target_file = "README.md";
    #
    # Should be in a directory with README.md
    #
    chdir ".." if -f "../$target_file";
    die "Cannot figure out where we should go" unless -f $target_file;
}
elsif ($type == $ADVENT_OF_CODE) {
    #
    # Should be in Day_NN directory
    #
    die "Cannot figure out where we should go"
         unless $dir =~ m {/Day_[012][0-9]$};
}
elsif ($type == $GOLF) {
    #
    # Check we're in an appropriate directory
    #
    die "Cannot figure out where we should go"
         unless $dir =~ m {^[0-9]+_[A-Za-z_]+$};
}

################################################################################
#
# Find the test dir; this is the directory where we find test
# inputs, expected outputs, and configurations files. This
# may be the current directory.
#
################################################################################

my $TEST_DIR = $type == $PERL_WEEKLY_CHALLENGE ? "t" : ".";

my $config = load_config ($TEST_DIR);

#
# Figure out the languages and challenges we need to handle.
#
my $todo = calc_todo (config     =>  $config,
                      type       =>  $type,
                      argv       => \@ARGV,
                      languages  => \@languages,
                      challenges => \@challenges);



################################################################################
#
# Iterate over the challenges, and run tests for each of them. 
#
################################################################################

foreach my $challenge (keys @$todo) {
    my $info = $$todo [$challenge] or next;
    next unless $$info [$INDEX_SOURCE];
    my @args = ($config, $type, $challenge, $info);
    if ($type == $PERL_WEEKLY_CHALLENGE || grep {$_} @$todo > 1) {
        subtest "Challenge $challenge" => sub {
            test_challenge (@args);
        }
    }
    else {
        test_challenge (@args);
    }
}


################################################################################
#
# Run tests for a single challenge; this means we iterate over all the
# languages, and run the tests for the specific language.
#
################################################################################

sub test_challenge ($config, $type, $challenge, $info) {
    my $sources = $$info [$INDEX_SOURCE];
    my $tests   = $$info [$INDEX_TESTS];

    #
    # Iterate over the languages to be tested
    #
    my @languages = sort keys %$sources;
    foreach my $language (@languages) {
        my @args = ($config, $type, $challenge,
                    $language, $$sources {$language}, $tests);
        if ($type == $PERL_WEEKLY_CHALLENGE ||
            $type == $GOLF                  ||
            @languages > 1) {
            subtest $$config {$KEY_LANGUAGES} {$language} {name} => sub {
                test_language (@args);
            }
        }
        else {
            test_language (@args);
        }
    }
}


done_testing;
exit;

#
# Find a specific setting; the first defined one of:
#   - For a specific input/language
#   - For a specific input
#   - For a specific challenge
#   - For a specific language
#
my sub setting ($config, $key, $type, $challenge, $language, $input = undef) {
    my $result;
    if (defined $input) {
        $result = $$config {$input} {$language} {$key} //
                  $$config {$input}             {$key};
    }
    $result // $$config {$KEY_CHALLENGES} {$challenge} {$language} {$key} //
               $$config {$KEY_CHALLENGES} {$challenge}             {$key} //
               $$config {$KEY_LANGUAGES}  {$language}              {$key};
}

#
# Given a challenge type, a challenge round (if any), and a language,
# return the file we expect the source to be in.
#
my sub source ($config, $type, $challenge, $language) {
    my $source = $$config {$KEY_TYPE} {$type} {source};
    my $ext    = $$config {$KEY_LANGUAGES} {$language} {ext};
    my $dir    = $$config {$KEY_LANGUAGES} {$language} {dir};

    $source =~ s/\Q%{dir}/$dir/gr
            =~ s/\Q%{ext}/$ext/gr
            =~ s/\Q%{challenge}/$challenge/gr;
}


#
# Return the set of inputs, given a challenge and type.
#
my sub inputs ($config, $type, $challenge) {
    my   $pattern = $$config {$KEY_TYPE} {$type} {glob_input};
    glob $pattern =~ s/\Q%{challenge}/$challenge/gr;
}

################################################################################
#
# Run the tests for a specific challenge/language
#
# $in_outputs: hash, keyed by input name (1, 1-1, etc); values
#              are two element arrays, an input file, and an expected
#              output file.
#
################################################################################

sub test_source;
sub test_language ($config, $type, $challenge,
                   $language, $sources, $in_outputs) {
    if (@$sources == 1) {
        test_source $config, $type, $challenge, $language, $$sources [0],
                    $in_outputs
    }
    else {
        foreach my $source (@$sources) {
            subtest $source => sub {
                test_source $config, $type, $challenge, $language,
                            $source, $in_outputs
            }
        }
    }
}


sub do_a_run (%params) {
    my $exe             =  $params {exe};
    my $exe_args        =  $params {exe_args};
    my $args            =  $params {args};
    my $line_at_a_time  =  $params {line_at_a_time};
    my $input_file      =  $params {input_file};
    my $add_to_input    =  $params {add_to_input};
    my $add_to_line     =  $params {add_to_line};
    my $output_file     =  $params {output_file};
    my $join_output     =  $params {join_output};
    my $trim            =  $params {trim};
    my $skip_prompt     =  $params {skip_prompt};
    my $remove_pat      =  $params {remove_pat};
    my $precision       =  $params {precision};
    my $sort_type       =  $params {sort_type};
    my $compiled        =  $params {compiled};
    my $no_input        =  $params {no_input};
    my $test_name       =  $params {test_name};
    my $exp_pattern     =  $params {exp_pattern};
    my $run_type        =  $params {run_type} // "";
    my $sort_words      =  $params {sort_words};

    my $command;
    if ($exe) {
        $command = "$exe $exe_args $run_type $args"
    }
    elsif ($compiled) {
        $command = "./$compiled $run_type $args"
    }
    else {
        die "Do not know what to do!";
    }

    if ($line_at_a_time) {
        my ($lines) = `wc -l $input_file` =~ /([0-9]+)/;
        my @cmmds = map {"head -$_ $input_file | tail -1 | $command"}
                          1 .. $lines;
        $command = join ";" => @cmmds;
    }
    elsif (!$no_input) {
        my $cmd = "(cat $input_file";
        if (defined $add_to_line) {
            my $add = quotemeta $add_to_line;
            $cmd .= " | perl -ple '\$_ .= qq [ $add]'"
        }
        if (defined $add_to_input) {
            $cmd .= "; echo '$add_to_input'";
        }
        $command = "$cmd) | $command";
    }

    my $exp_out   = `cat $output_file`;
    my $start     =  time;
    my $got_out   = `$command`;
    my $end       =  time;
    my $runtime   =  $end - $start;

    #
    # Perhaps we need to join the output into a single string;
    # this needs to be done before trimming.
    #
    $got_out =~ s/\n(?!$)//g if $join_output;

    #
    # Trim output of leading/trailing whitespace.
    #
    unless (defined $trim && !$trim) {
        s/^\h+//mg, s/\h+$//mg for $exp_out, $got_out;
    }

    #
    # If a language outputs an unsurpressable prompt,
    # we will eliminate it.
    #
    if ($skip_prompt) {
        1 while $got_out =~ s/^\s*$skip_prompt\s*//m;
    }

    if ($remove_pat) {
        $got_out =~ s/$remove_pat//g;
    }

    if ($precision) {
        #
        # This only works for outputs which are numeric.
        #
        $got_out = join "\n" => map {sprintf "%.${precision}f" => $_}
                                split /\n/ => $got_out;
        $exp_out = join "\n" => map {sprintf "%.${precision}f" => $_}
                                split /\n/ => $exp_out;
    }

    if ($sort_type) {
        if ($sort_type =~ /^n/) {
            $got_out = join "" => map  {"$_\n"}
                                  sort {$a <=> $b}
                                  split "\n" => $got_out
        }
        else {
            $got_out = join "" => map  {"$_\n"}
                                  sort {$a cmp $b}
                                  split "\n" => $got_out
        }
    }

    #
    # Sort the words/numbers on *each line*
    #
    if ($sort_words) {
        if ($sort_words =~ /^n/) {
            $got_out = join "" => map {"$_\n"}
                                  map {join " " => @$_}
                                  map {[sort {$a <=> $b} @$_]}
                                  map {[split ' ']} split /\n/ => $got_out;
            $exp_out = join "" => map {"$_\n"}
                                  map {join " " => @$_}
                                  map {[sort {$a <=> $b} @$_]}
                                  map {[split ' ']} split /\n/ => $exp_out;
        }
        else {
            $got_out = join "" => map {"$_\n"}
                                  map {join " " => @$_}
                                  map {[sort {$a cmp $b} @$_]}
                                  map {[split ' ']} split /\n/ => $got_out;
            $exp_out = join "" => map {"$_\n"}
                                  map {join " " => @$_}
                                  map {[sort {$a cmp $b} @$_]}
                                  map {[split ' ']} split /\n/ => $exp_out;
        }
    }

    if ($runtime >= 0.01) {
        $test_name .= sprintf " (%.2fs)" => $runtime;
    }

    if ($exp_out =~ /^qr\s*\{(.*)\}$/ ||
            (defined $exp_pattern && !$exp_pattern)) {
        my $pattern = $exp_pattern ? $exp_out : $1;
        like $got_out, qr /$pattern/, $test_name
    }
    else {
        is $got_out, $exp_out, $test_name
    }
}




sub test_source ($config, $type, $challenge, $language, $source, $in_outputs) {
    my $lang_info = $$config {$KEY_LANGUAGES} {$language};

    my $compiler = $$lang_info {comp};
    my $compiled = "";
    my @unlink;

    if ($$lang_info {env}) {
        my $env = $$lang_info {env};
        foreach my $key (keys %$env) {
            my $value = $$env {$key};
            $ENV {$key} = $value;
        }
    }

    my $SOURCE_FILE = $source;
    my $SOURCE_NAME = $source =~ s!.*/!!r =~ s!\..*!!r;

    my $run_file = $source;
    if ($$lang_info {remove_dash}) {
        $run_file = $SOURCE_FILE =~ s{/ch-}{/ch}r;
        $run_file =~ s!.*/!!;
        link $source => $run_file or die "link $SOURCE_FILE, $run_file: $!";
        push @unlink => $run_file;
    }

    my $RUN_FILE = $run_file;
    my $RUN_NAME = $run_file =~ s!.*/!!r =~ s!\..*$!!r;
    my $RUN_BASE = $run_file             =~ s!\..*$!!r;

    if ($compiler) {
        $compiled = $run_file . "_out";
        my $path  = $$lang_info {path};
        my $oldpath;
        if ($path) {
            $oldpath = $ENV {PATH} . "";
            $ENV {PATH} = "$path:$oldpath";
        }
        my @args;

        my $comp_args = $$lang_info {comp_args} || "-o %COMPILED %RUN_FILE";

        $comp_args    = $comp_args =~ s/%(?:RUN_)?NAME\b/$RUN_NAME/gr
                                   =~ s/%SOURCE_NAME\b/$SOURCE_NAME/gr
                                   =~ s/%SOURCE_FILE\b/$SOURCE_FILE/gr
                                   =~ s/%RUN_FILE\b/$RUN_FILE/gr
                                   =~ s/%COMPILED\b/$compiled/gr;

        system "$compiler $comp_args" and do {
            fail "Failed to compile $RUN_FILE";
            return;
        };

        if ($oldpath) {
            $ENV {PATH} = $oldpath;
        }
    }

    foreach my $input (sort keys %$in_outputs) {
        SKIP: {
            #
            # Nothing special for now.
            #
            my @setting_args = ($type, $challenge, $language, $input);
            my $skip      = setting ($config, "skip", @setting_args);
            skip $skip, 1 if $skip;

            my $exe       = setting ($config, "exe",      @setting_args);
            my $args      = setting ($config, "args",     @setting_args) // "";
            my $exe_args  = setting ($config, "exe_args", @setting_args);
            my $no_input  = setting ($config, "no_input", @setting_args);
            my $line_at_a_time =
                            setting ($config, "line_at_a_time", @setting_args);
            my $add_to_input =
                            setting ($config, "add_to_input",   @setting_args);
            my $add_to_line =
                            setting ($config, "add_to_line",    @setting_args);
            my $join_output =
                            setting ($config, "join_output",    @setting_args);
            my $exp_pattern = 
                            setting ($config, "exp_pattern",    @setting_args);
            my $input_from  =
                            setting ($config, "input_file",     @setting_args);
            my $run_types = setting ($config, "run_types", @setting_args) // "";
            my $trim      = setting ($config, "trim",      @setting_args) // 1;
            my $skip_prompt =
                            setting ($config, "skip_prompt", @setting_args);
            my $remove_pat  =
                            setting ($config, "remove_pattern", @setting_args);
            my $precision = setting ($config, "precision", @setting_args);
            my $sort_type = setting ($config, "sort", @setting_args);
            my $sort_words  =
                            setting ($config, "sort_words", @setting_args);

            my ($input_file, $output_file) = @{$$in_outputs {$input}};

            $input_file = $input_from if $input_from;

            if (defined $exe && $exe eq 'TIO') {
                skip "No executable present on system", 1;
            }

            $exe_args //= $RUN_FILE;
            $exe_args   = $exe_args =~ s/%(?:RUN_)?NAME\b/$RUN_NAME/gr
                                    =~ s/%SOURCE_NAME\b/$SOURCE_NAME/gr
                                    =~ s/%SOURCE_FILE\b/$SOURCE_FILE/gr
                                    =~ s/%RUN_FILE\b/$RUN_FILE/gr;

            #
            # We may need to separate program options from the language options.
            #
            if (length $args &&
                setting ($config, "sep_args", @setting_args)) {
                $args = setting ($config, "sep_args", @setting_args) . " " .
                                 $args;
            }

            $args = $args =~ s/%(?:RUN_)?NAME\b/$RUN_NAME/gr
                          =~ s/%SOURCE_NAME\b/$SOURCE_NAME/gr
                          =~ s/%SOURCE_FILE\b/$SOURCE_FILE/gr
                          =~ s/%RUN_FILE\b/$RUN_FILE/gr;

            my $test_name = $$config {names} {$input} // $input_file;

            my $params = {
                exe            => $exe,
                exe_args       => $exe_args,
                args           => $args,
                line_at_a_time => $line_at_a_time,
                input_file     => $input_file,
                add_to_input   => $add_to_input,
                add_to_line    => $add_to_line,
                output_file    => $output_file,
                join_output    => $join_output,
                trim           => $trim,
                skip_prompt    => $skip_prompt,
                remove_pat     => $remove_pat,
                precision      => $precision,
                sort_type      => $sort_type,
                sort_words     => $sort_words,
                compiled       => $compiled,
                no_input       => $no_input,
                exp_pattern    => $exp_pattern,
                test_name      => $test_name,
            };
            if ($run_types) {
                subtest $test_name => sub {
                    foreach my $run_type (split /[,\s]+/ => $run_types) {
                        do_a_run %$params, test_name => $run_type,
                                           run_type  => $run_type;
                    }
                }
            }
            else {
                do_a_run %$params;
            }
        }
    }

    #
    # If we have any additional tests, use the module they
    # are in, and call "test" in that module. This should
    # run whatever test it needed.
    #
    my $extra_tests = setting ($config, "extra_tests", $type, $challenge,
                                $language, undef);
    if ($extra_tests) {
        foreach my $test (split /,\s*/ => $extra_tests) {
            use lib 't';
            require "$test.pm";
            my @args = (language  =>  $language,
                        source    =>  $source,);
            $test -> test (@args);
        }
    }

    #
    # FIX ME: Should depend on settings
    #
    check_reference (source   => $source,
                     config   => $config,
                     type     => $type,
                     language => $language);

    if ($compiler && -f $compiled) {
        unlink $compiled;
    }

    if ($$lang_info {clean_files}) {
        foreach my $file (split /\s+/ => $$lang_info {clean_files}) {
            $file =~ s/%(?:RUN_)BASE\b/$RUN_BASE/;
            push @unlink => $file;
        }
    }

    unlink $_ for @unlink;
}


#
# Parse the tables SQL, extract the table names, and the column names,
# *EXCLUDING* any primary key of the form "integer PRIMARY KEY"
# We're assuming some sane formatting (one column per line).
#
# Returns an array of arrays. Each (inner) array consists of a table
# name, followed by the name of the columns of that table.
#
# We will also create the database handle, use it to create the tables,
# and return the database handle as a second value.
#
sub init_sql ($query_file, $tables_file) {
    my $query  = `cat $query_file`;
    my $tables = -f $tables_file ? `cat $tables_file` : "";

    my $in_table = 0;
    my @info;
    foreach (split /\n/ => $tables) {
        if (!$in_table) {
            if (/^\s* CREATE \s+ TABLE \s+ (\w+)/xi) {
                $in_table = 1;
                push @info => [$1];
            }
            next;
        }
        else {
            if (/^\s* \)/x) {
                $in_table = 0;
                next;
            }
            # Any other line is a column definition
            next if /^ \s* \w+ \s+ integer \s+ PRIMARY \s+ KEY \s*,/xi;
            if (/^ \s* (\w+)/x) {
                push @{$info [-1]} => $1;
            }
        }
    }
    #
    # Does the query have place holders?
    #
    if ($query =~ /\?/) {
        push @info => ["Placeholder"];
    }

    my $dbh = DBI:: -> connect ("dbi:SQLite:dbname=:memory:", "", "",
                                {RaiseError   =>  1,
                                 PrintError   =>  1,
                                 AutoCommit   =>  1});
    $dbh -> do ($tables) if $tables;

    return ($dbh, $query, \@info);
}


sub test_sql ($dbh, $query, $tables_info, $input) {
    #
    # For now, assume we each set of N lines, where N is the number of tables
    # is a test. We also assume that if a line has P items (space separated),
    # and the corresponing table has Q columns (not counting any integer primary
    # keys, as SQLite fills them automatically), we have to fill int (P/Q) rows.
    #

    #
    # Read the input, if any
    #
    my @input;
    if (-f $input) {
        open my $i_fh, "<", $input or die "Failed to open $input: $!";
        @input = <$i_fh>;
    }

    my $output = "";

  TEST:
    while (@input >= @$tables_info) {
        my $real_query = $query;
        foreach my $table_info (@$tables_info) {
            my ($table, @fields) = @$table_info;
            my $input            = shift @input;
            my @values           = split ' ' => $input;
            last TEST if @values < @fields && $table ne "Placeholder";

            #
            # Handle place holder queries
            #
            if ($table eq "Placeholder") {
                $real_query =~ s/\?/shift @values/eg;
                next;
            }

            #
            # Clear the table
            #
            $dbh -> do ("DELETE FROM $table");

            #
            # Construct an input query
            #
            my $place  = "(" . join (", " => ("?") x @fields) . ")";
            my $insert = do {local $" = ", "; <<~ "--"};
                INSERT
                  INTO  $table
                       (@fields)
                VALUES  @{[($place) x (@values / @fields)]}
            --

            $dbh -> do ($insert, undef, @values);
        }


        #
        # Run the query. If we have multiple results, join columns
        # by spaces, and rows by newlines.
        #
        foreach my $query (split /^\s*;\s*$/m => $real_query) {
            my $result = $dbh -> selectall_arrayref ($query);
            $output   .= join "\n" => map {join " " => @$_} @$result;
            $output   .= "\n";
        }

        last unless @input;
    }

    $output;
}

################################################################################
#
# Load any configuration files; for now, we are assuming there is only
# one configuration file. Note that load_stems returns an array ref of 
# configuration hashes, of which the (single) key is the name of the
# configuration file; so we're getting the first element of the array
# ref, and take the first element of the list of values returned.
#
################################################################################

sub load_config ($conf_dir) {
    my $all_config = Config::Any::
                          -> load_stems ({stems   => ["$conf_dir/ctest"],
                                          use_ext => 1});

    my $config = (values %{$$all_config [0]}) [0];

    #
    # Split any compound sections; we only handle one level deep.
    #
    foreach my $key (keys %$config) {
        $key =~ m{[/,]} or next;
        my $info = delete $$config {$key};
        my ($major, $minor, $minor2) = split '/' => $key;
        foreach my $sub_major (split /,\s*/ => $major) {
            if ($minor) {
                foreach my $sub_minor (split /,\s*/ => $minor) {
                    if ($minor2) {
                        foreach my $sub_minor2 (split /,\s*/ => $minor2) {
                            foreach my $key (keys %$info) {
                                my $value = $$info {$key};
                                $$config {$sub_major} {$sub_minor}
                                         {$sub_minor2} {$key} = $value;
                            }
                        }
                    }
                    else {
                        foreach my $key (keys %$info) {
                            my $value = $$info {$key};
                            $$config {$sub_major} {$sub_minor} {$key} = $value;
                        }
                    }
                }
            }
            else {
                foreach my $key (keys %$info) {
                    $$config {$sub_major} {$key} = $$info {$key}
                }
            }
        }
    }
    
    load_language_config ($config);
    load_type_config     ($config);

    $config;
}

#
# Load the language info. 
#

sub load_language_config ($config) {
    my $HOME = $ENV {HOME};
    my $KEY  = "languages";

    my %languages = (
        AWK             =>   {
            exe         =>   "/usr/bin/awk",
            exe_args    =>   "-f %RUN_FILE",
            sep_args    =>   "--",
        },
        Bash            =>   {
            ext         =>   "sh",
            exe         =>   "/opt/local/bin/bash",
        },
        BASIC           =>   {
            ext         =>   "bas",
            exe         =>   "$HOME/Bin/run-language",
            skip_prompt =>   '[?]',
        },
        bc              =>   {
            exe         =>   "/usr/bin/bc",
            filter      =>   's/.*/main($&)/',
        },
       'Befunge-93'     =>   {
            dir         =>   "befunge-93",
            ext         =>   "bf93",
            exe         =>   "/opt/local/bin/befunge-93",
            exe_args    =>   "-q %RUN_FILE",
            no_ref      =>    1,
        },
       'Brainfuck'      =>   {
            ext         =>   "bf",
            exe         =>   "$HOME/Bin/brainfuck",
        },
        C               =>   {
            comp        =>   "/usr/bin/cc",
        },
        Chef            =>   {
            exe         =>   "/opt/perl/bin/chef",
        },
        Cobol           =>   {
            ext         =>   "cb",
            comp        =>   "/usr/local/bin/cobc",
            comp_args   =>   "-xF -o %COMPILED %RUN_FILE",
        },
        Csh             =>   {
            exe         =>   "/bin/csh",
        },
        Erlang          =>   {
            ext         =>   "erl",
            exe         =>   "/usr/local/bin/erl",
            exe_args    =>   "-noshell -s %NAME main -s init stop",
            comp        =>   "/usr/local/bin/erl",
            comp_args   =>   "-compile %NAME",
            remove_dash =>    1,
            clean_files =>   "%RUN_BASE.beam",
        },
        Forth           =>   {
            ext         =>   "fs",
            exe         =>   "TIO",   # Could no build gforth
            no_ref      =>    1,
        },
        Fortran         =>   {
            ext         =>   "f90",
            comp        =>   "/usr/local/opt/gfortran/bin/gfortran-10",
            path        =>   "/usr/bin",
        },
       "GNU AWK"        =>   {
            exe         =>   "/opt/local/bin/gawk",
            exe_args    =>   "-f %RUN_FILE",
            sep_args    =>   "--",
            dir         =>   "awk",
            ext         =>   "gawk",
        },
        Go              =>   {
            exe         =>   "/usr/local/bin/go",
            exe_args    =>   "run %RUN_FILE",
        },
        Java            =>   {
            comp        =>   "/usr/bin/javac",
            comp_args   =>   "%RUN_FILE",
            exe         =>   "/usr/bin/java",
            exe_args    =>   "%RUN_NAME",
            remove_dash =>    1,
            clean_files =>   "%RUN_BASE.class",
        },
        Lua             =>   {
            exe         =>   '/opt/local/bin/lua',
        },
        m4              =>   {
            name        =>   'm4',
            exe         =>   '/usr/bin/m4',
            no_ref      =>   1,
        },
        MMIX            =>   {
            ext         =>   "mms",
            comp        =>   "/usr/local/bin/mmixal",
            comp_args   =>   "-o %SOURCE_NAME.out %SOURCE_FILE",
            exe         =>   "/usr/local/bin/mmix",
            exe_args    =>   "-q %SOURCE_NAME.out",
            no_ref      =>    1,
        },
        MUMPS           =>   {
            ext         =>   "mps",
            exe         =>   "TIO",   # Language::Mumps is really broken
        },
        Node            =>   {
            name        =>   'Node.js',
            exe         =>   "/usr/local/bin/node",
            ext         =>   "js",
            dir         =>   "node",
        },
        OCaml           =>   {
            exe         =>   "/usr/local/bin/ocaml",
            ext         =>   "ml",
        },
       'Ook!'           =>   {
            exe         =>   "$HOME/Bin/ook",
        },
        Pascal          =>   {
            ext         =>   "p",
            comp        =>   "/usr/local/bin/fpc",
            comp_args   =>   "-Fe/dev/null -o%COMPILED %RUN_FILE",
            clean_files =>   "%RUN_BASE.o",
        },
        Perl            =>   {
            exe         =>   "/opt/perl/bin/perl",
            ext         =>   "pl",
        },
        PHP             =>   {
            exe         =>   "/usr/bin/php",
        },
        PostScript      =>   {
            exe         =>   "/opt/local/bin/ps2ascii",
            ext         =>   "ps",
        },
        Python          =>   {
            ext         =>   "py",
            exe         =>   "/usr/local/bin/python3",
        },
        Tcl             =>   {
            exe         =>   "/usr/local/opt/tcl-tk/bin/tclsh"
        },
        R               =>   {
            exe         =>   "/usr/local/bin/Rscript",
            env         =>   {
                LANG        =>   "en_US.UTF-8",
                LC_ALL      =>   "en_US.UTF-8",
            },
        },
        Rexx            =>   {
            exe         =>   "/usr/local/bin/rexx",
        },
        Ruby            =>   {
            ext         =>   "rb",
            exe         =>   "/usr/bin/ruby",
        },
        Scheme          =>   {
            ext         =>   "scm",
            exe         =>   "/usr/local/bin/guile",
            exe_args    =>   "--no-auto-compile %RUN_FILE",
        },
        sed             =>   {
            exe         =>   "/usr/bin/sed",
            exe_args    =>   "-f %RUN_FILE",
        },
        SQL             =>   {
            exe         =>   "/opt/local/bin/sqlite3",
            exe_args    =>   "< %RUN_FILE",
        },
    );

    #
    # Do we already have language info defined in the config file?
    #
    foreach my $key (keys %$config) {
        next unless $key =~ m {^language/(.*)};
        my $language = lc $1;
        $$config {$KEY} {$language}          = delete $$config {$key};
        $$config {$KEY} {$language} {name} //= $1;
    }

    #
    # Merge; we store the languages in lower case, with non-letters removed.
    #
    foreach my $language (keys %languages) {
        my $lc_language = (lc $language) =~ s/[^a-zA-Z0-9]//gr;
        $languages {$language} {dir}  //= $lc_language;
        $languages {$language} {ext}  //= $lc_language;
        $languages {$language} {name} //=    $language; # Keep original name.
        foreach my $key (keys %{$languages {$language}}) {
            $$config {$KEY} {$lc_language} {$key} //=
                    $languages {$language} {$key};
        }
    }
}



#
# Load type dependent configuration
#
sub load_type_config ($config) {
    $$config {$KEY_TYPE} {$PERL_WEEKLY_CHALLENGE} {source} ||=
                            "%{dir}/ch-%{challenge}{,[a-z]}.%{ext}";
    $$config {$KEY_TYPE} {$ADVENT_OF_CODE}        {source} ||=
                                                  "solution.%{ext}";
    $$config {$KEY_TYPE} {$GOLF}                  {source} ||=
                                                  "solution.%{ext}";

    $$config {$KEY_TYPE} {$PERL_WEEKLY_CHALLENGE} {glob_input} ||=
                                           "t/input-%{challenge}-*";
    $$config {$KEY_TYPE} {$ADVENT_OF_CODE}        {glob_input} ||=
                                                          "input-*";
    $$config {$KEY_TYPE} {$GOLF}                  {glob_input} ||=
                                                          "input-*";

}



#
# Return a structure of things we need to process.
# This will be an array ref; each element a challenge.
# Each challenge will have a list of languages to process,
# and a set of inputs/outputs.
#
#    [
#        [language1, language2, ...],
#        {
#            test1 => [input_file1, output_file1],
#            test2 => [input_file2, output_file2],
#            ...,
#        },
#        ...
#    ]
#
#
#
sub calc_todo (%args) {
    my $config     = $args {config};
    my $type       = $args {type};
    my $argv       = $args {argv} || [];

    #
    # Find the default set of challenges:
    #   -  If passed on as options, use them,
    #   -  Else, grep anything looking like a number from @ARGV,
    #   -  Else, use 1 .. 2, or just 1.
    #
    my $challenges = $args {challenges} ?  [grep {/^[1-9][0-9]*$/}
                                                @{$args {challenges}}]
                                        :  [];
    if (!@$challenges) {
        $challenges = [grep {/^[1-9][0-9]*$/} @$argv];
        $challenges = $type == $PERL_WEEKLY_CHALLENGE ? [1 .. 2] : [1]
                                unless @$challenges;
    }


    #
    # Find the default set of languages:
    #   -  If passed on as options, use them,
    #   -  Else, grep anything which looks like a language from @ARGV,
    #   -  Else, use languages from the configuration.
    #
    my $languages  = $args {languages}  ?  [map  {lc ($_) =~ s/\PL+//gr}
                                                @{$args {languages}}]
                                        :  [];

    if (!@$languages) {
        #
        # If we don't have any languages passed in, see whether there
        # is something on @ARGV which looks like a language; if so, use it.
        #
        if ($argv && @$argv) {
           $languages = [grep {$$config {$KEY_LANGUAGES} {$_}}
                         map  {lc ($_) =~ s/[^a-zA-Z0-9]+//gr} @$argv];
        }
    }
    #
    # Still nothing? Get the list from the config
    #
    $languages = [keys %{$$config {$KEY_LANGUAGES}}] unless @$languages;

    #
    # Now, find solutions.
    #
    my @out;

    foreach my $language (@$languages) {
        my $ext = $$config {$KEY_LANGUAGES} {$language} {ext};
        my $dir = $$config {$KEY_LANGUAGES} {$language} {dir};
        foreach my $challenge (@$challenges) {
            my $source  = source $config, $type, $challenge, $language;
            my @sources = grep {-f} glob $source;
            if (@sources) {
                $out [$challenge] [$INDEX_SOURCE] {$language} = \@sources;
            }
            my @inputs = inputs $config, $type, $challenge;
            foreach my $input (@inputs) {
                $input =~ /input-/p;  ## FIXME
                my $name = ${^POSTMATCH};
                my $output  = $input =~ s/input/output/r;
                   $output .= ".exp";
                $out [$challenge] [$INDEX_TESTS] {$name} = [$input, $output];
            }
        }
    }

    \@out;
}


#
# Tests that we will always run (possibly depending on type of challenge
# and language)
#
sub check_reference (%args) {
    my $config   = $args {config};
    my $source   = $args {source};
    my $type     = $args {type};
    my $language = $args {language};
    return if setting $config, "no_ref", $type, "", $language;
    subtest "Check references" => sub {
        my $name     = $source =~ s!.*/!!r;   # Get the file name
        my $pat      = qr /\b(ch-[0-9]+[a-z]?\.\w+)/;
        my @text     = `cat $source`;
        my @matches  = map {/$pat/g} grep {/Run as:/} @text;
        ok grep ({$_ eq $name} @matches), "Self reference";
        if ($$config {$KEY_LANGUAGES} {$language} {comp}) {
            my $comp = $name =~ s/\.\K\w+$/o/r;
            my $out  = $comp . "ut";
            @matches = grep {$_ ne $comp && $_ ne $out} @matches;
        }
        ok !grep ({$_ ne $name} @matches), "No other reference";
    }
}



__END__
